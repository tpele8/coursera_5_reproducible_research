points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = ("May", "Other Months"))
points(may$Wind, may$Ozone, col = "blue", pch = 17)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
?aline
?line
line(airquality$Wind, lty = 2)
abline(airquality$Wind, lty = 2)
lines(airquality$Wind, lty = 2)
lines(median(airquality$Wind), lty = 2)
lines(v = median(airquality$Wind), lty = 2)
lines(v = median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = "manufacturer")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, aes = drv)
qplot(hwy, data = mpg, aes(drv))
?qplot
qplot(drv, hwy, data = mpg, geom = "boxplot", fill = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, .~drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(lm)
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = .~drv)
g + geom_point() + geom_smooth(method = lm) + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "point", size = 4, alpha = 1/2)
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g = geom_point(size = 4, alpha = 1/2, aes(color = drv))
g = geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(color = drv) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv, size = 2, alpha = 1/2)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(color = drv) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
library(BodyWeight)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("nlme")
library(nlme)
?nlme
library(BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
g + geom_point()
ggplot2movies
clc
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages(ggplot2movies)
library(ggplot2movies)
ggplot2movies
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g + geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(as.dendrogram(denmt))
plot(denmt)
distmt
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min())
apply(distTmp, 2, which.min
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
dist(x, y, newCx, newCy)
distance(x, y, newCx, newCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$d[1]*(svd1$u[,1]%*%svd1$d[1])
a1 <- svd1$d[1]*(svd1$u[,1]%*%svd1$v[1])
a1 <- svd1$d[1]*(svd1$u[,1]%*%svd1$v[,1])
a1 <- (svd1$u[,1]*svd1$d[1]) %*%t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1] %*% svd1$u[,2]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1] %*% svd1$u[,2]) %*% t(svd1$v[,1])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[,2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[,1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563]
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist(dist(sub1[,10:12]))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scal(sub1[,-c(562, 563)]))
svd1 <- svd(scale(sub1[,-c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1$[,c(10:12, maxCon])
mdist <- dist(sub1$[,c(10:12, maxCon)])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c])
kClust <- kmeans(sub1)
kClust <- kmeans(sub1$tBodyAcc.mean...X)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[,1:3], centers = 6)
kClust <- kmeans(sub1[,-c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|', fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm25$Sample.Value
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- boolean(x1 < 0)
negative <- which(x1 < 0)
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub,  na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, set = "state")
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(0.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project2")
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
View(df)
# Explore data
#str(df)
#propdmgexpdistinct <- df %>% distinct(PROPDMGEXP)
#propdmgexpdistinct$PROPDMGEXP
#distinctEventType <- df %>% distinct(EVTYPE)
#distinctEventType$EVTYPE
# Question 1: Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable)
# are most harmful with respect to population health?
# Question 2: Across the United States, which types of events have the greatest economic consequences?
# Create dataframe to be used in the analysis
dfMod <- df[,c(8, 23, 24, 25, 27)]
# Sum injuries and fatalaties into a single column, then so the same for the property and crop damage
dfMod$TOTDEST <- apply(dfMod1[,2:3], 1, FUN = sum)
dfMod2$TOTDMG <- apply(dfMod2[,2:3], 1, FUN = sum)
# Add up total destruction by disaster type and sort, then only analyze the top most harmful disasters
totByEvent <- sort(tapply(dfMod1$TOTDEST, dfMod1$EVTYPE, FUN = sum), decreasing = TRUE)
totByDmg <- sort(tapply(dfMod2$TOTDMG, dfMod2$EVTYPE, FUN = sum), decreasing = TRUE)
# Used the disasters that had at least 100 injuries/fatalities
totByEventReduce <- head(as.data.frame(totByEvent), n = 10)
totByDmgReduce <- head(as.data.frame(totByDmg), n = 10)
names(totByEventReduce) <- c("MAGNITUDE")
names(totByDmgReduce) <- c("MAGNITUDE")
# Plot to see how things relate
plot(totByEventReduce, ylab = "Magnitude of Injuries/Fatalities", xlab = "Disaster Index",
main = "Health Impact of Top 10 Disasters Across the United States")
plot(totByDmgReduce, ylab = "Magnitude of Economical Damages", xlab = "Disaster Index",
main = "Economic Impact From Top 10 US Disasters")
# Print
print(totByEventReduce)
print(totByDmgReduce)
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project2")
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
# Explore data
#View(df)
#str(df)
#propdmgexpdistinct <- df %>% distinct(PROPDMGEXP)
#propdmgexpdistinct$PROPDMGEXP
#distinctEventType <- df %>% distinct(EVTYPE)
#distinctEventType$EVTYPE
# Question 1: Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable)
# are most harmful with respect to population health?
# Question 2: Across the United States, which types of events have the greatest economic consequences?
# Create dataframe to be used in the analysis
dfMod <- df[,c(8, 23, 24, 25, 27)]
# Sum injuries and fatalaties into a single column, then so the same for the property and crop damage
dfMod$TOTDEST <- apply(dfMod[,2:3], 1, FUN = sum)
dfMod$TOTDMG <- apply(dfMod[,4:5], 1, FUN = sum)
# Add up total destruction by disaster type and sort, then only analyze the top most harmful disasters
totByEvent <- sort(tapply(dfMod$TOTDEST, dfMod$EVTYPE, FUN = sum), decreasing = TRUE)
totByDmg <- sort(tapply(dfMod$TOTDMG, dfMod$EVTYPE, FUN = sum), decreasing = TRUE)
# Used the disasters that had at least 100 injuries/fatalities
totByEventReduce <- head(as.data.frame(totByEvent), n = 10)
totByDmgReduce <- head(as.data.frame(totByDmg), n = 10)
names(totByEventReduce) <- c("MAGNITUDE")
names(totByDmgReduce) <- c("MAGNITUDE")
# Plot to see how things relate
plot(totByEventReduce, ylab = "Magnitude of Injuries/Fatalities", xlab = "Disaster Index",
main = "Health Impact of Top 10 Disasters Across the United States")
plot(totByDmgReduce, ylab = "Magnitude of Economical Damages", xlab = "Disaster Index",
main = "Economic Impact From Top 10 US Disasters")
# Print
print(totByEventReduce)
print(totByDmgReduce)
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project2")
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
# Explore data
#View(df)
#str(df)
#propdmgexpdistinct <- df %>% distinct(PROPDMGEXP)
#propdmgexpdistinct$PROPDMGEXP
#distinctEventType <- df %>% distinct(EVTYPE)
#distinctEventType$EVTYPE
# Question 1: Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable)
# are most harmful with respect to population health?
# Question 2: Across the United States, which types of events have the greatest economic consequences?
# Create dataframe to be used in the analysis
dfMod <- df[,c(8, 23, 24, 25, 27)]
# Sum injuries and fatalaties into a single column, then so the same for the property and crop damage
dfMod$TOTDEST <- apply(dfMod[,2:3], 1, FUN = sum)
dfMod$TOTDMG <- apply(dfMod[,4:5], 1, FUN = sum)
# Add up total destruction by disaster type and sort, then only analyze the top most harmful disasters
totByEvent <- sort(tapply(dfMod$TOTDEST, dfMod$EVTYPE, FUN = sum), decreasing = TRUE)
totByDmg <- sort(tapply(dfMod$TOTDMG, dfMod$EVTYPE, FUN = sum), decreasing = TRUE)
# Used the disasters that had at least 100 injuries/fatalities
totByEventReduce <- head(as.data.frame(totByEvent), n = 10)
totByDmgReduce <- head(as.data.frame(totByDmg), n = 10)
names(totByEventReduce) <- c("MAGNITUDE")
names(totByDmgReduce) <- c("MAGNITUDE")
# Plot to see how things relate
par(mfrow = c(2,1))
plot(totByEventReduce, ylab = "Magnitude of Injuries/Fatalities", xlab = "Disaster Index",
main = "Health Impact of Top 10 Disasters Across the United States")
plot(totByDmgReduce, ylab = "Magnitude of Economical Damages", xlab = "Disaster Index",
main = "Economic Impact From Top 10 US Disasters")
# Print
print(totByEventReduce)
print(totByDmgReduce)
dev.off()
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project2")
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
# Explore data
#View(df)
#str(df)
#propdmgexpdistinct <- df %>% distinct(PROPDMGEXP)
#propdmgexpdistinct$PROPDMGEXP
#distinctEventType <- df %>% distinct(EVTYPE)
#distinctEventType$EVTYPE
# Question 1: Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable)
# are most harmful with respect to population health?
# Question 2: Across the United States, which types of events have the greatest economic consequences?
# Create dataframe to be used in the analysis
dfMod <- df[,c(8, 23, 24, 25, 27)]
# Sum injuries and fatalaties into a single column, then so the same for the property and crop damage
dfMod$TOTDEST <- apply(dfMod[,2:3], 1, FUN = sum)
dfMod$TOTDMG <- apply(dfMod[,4:5], 1, FUN = sum)
# Add up total destruction by disaster type and sort, then only analyze the top most harmful disasters
totByEvent <- sort(tapply(dfMod$TOTDEST, dfMod$EVTYPE, FUN = sum), decreasing = TRUE)
totByDmg <- sort(tapply(dfMod$TOTDMG, dfMod$EVTYPE, FUN = sum), decreasing = TRUE)
# Used the disasters that had at least 100 injuries/fatalities
totByEventReduce <- head(as.data.frame(totByEvent), n = 10)
totByDmgReduce <- head(as.data.frame(totByDmg), n = 10)
names(totByEventReduce) <- c("MAGNITUDE")
names(totByDmgReduce) <- c("MAGNITUDE")
# Plot to see how things relate
dev.off()
plot(totByEventReduce, ylab = "Magnitude of Injuries/Fatalities", xlab = "Disaster Index",
main = "Health Impact of Top 10 Disasters Across the United States")
plot(totByDmgReduce, ylab = "Magnitude of Economical Damages", xlab = "Disaster Index",
main = "Economic Impact From Top 10 US Disasters")
# Print
print(totByEventReduce)
print(totByDmgReduce)
View(df)
length(totByEvent)
length(totByDmg)
print(paste("List totByEvent contains " + length(totByEvent) + " total incidents."))
print(paste("List totByDmg contains " + length(totByDmg) + " total incidents."))
sprintf("List totByEvent contains %d total incidents.", length(totByEvent))
sprintf("List totByDmg contains %d total incidents.", length(totByDmg))
message(sprintf("List totByEvent contains %d total incidents.", length(totByEvent)))
message(sprintf("List totByDmg contains %d total incidents.", length(totByDmg)))
cat(sprintf("List totByEvent contains %d total incidents.", length(totByEvent)))
cat(sprintf("List totByDmg contains %d total incidents.", length(totByDmg)))
