pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub,  na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, set = "state")
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(0.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
library(dplyr)
library(lattice)
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
---
title: "Reproducible Data Project 1"
author: "Tyler Peterson"
date: "10/6/2016"
output: html_document
keep_md: true
---
library(dplyr)
library(lattice)
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Loading and preprocessing the data
```{r}
# Read data from .csv and
df <- read.csv("activity.csv")
# Explore data
numDates = df %>% distinct(date)
numDates$date
str(numDates)
# Notice that in the steps column, there are NAs.  This may need to be taken into account later on
# Also notice that the structure of the date column is not in date format
df$date <- as.Date(df$date, "%Y-%m-%d")
```
# What is the mean total number of steps taken per day?
```{r}
# Calculating and plotting total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
meanStepsPerDay <- tapply(df$steps, df$date, FUN = mean, na.rm = TRUE)
medianStepsPerDay <- tapply(df$steps, df$date, FUN = median, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
# Display the average number of steps taken each day
meanStepsPerDay
medianStepsPerDay
```
# What is the average daily activity pattern?
```{r}
# Calculate and plot average daily activity
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
# Determine at which time interval the max number of steps were taken
meanStepsPerInterval[which.max(meanStepsPerInterval)]
# Convert that interval to a time of day
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12}
else{
floor(tempStepTime)
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to `r stepTime`
```
# Imputing missing values
```{r}
# Imputing missing values
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
```
# Are there differences in activity patterns between weekdays and weekends?
```{r}
# Determine new total steps per day
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
# Plot new total steps per day on a histogram
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
# Calculate new mean and median steps per day
meanNewStepsPerDay <- tapply(df2$steps, df2$date, FUN = "mean")
medianNewStepsPerDay <- tapply(df2$steps, df2$date, FUN = "median")
# Print new mean and median values
meanNewStepsPerDay
medianNewStepsPerDay
```
df <- read.csv("activity.csv")
str(df)
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
library(lattice)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
df <- read.csv("activity.csv")
# Explore data
numDates = df %>% distinct(date)
numDates$date
str(numDates)
df$date <- as.Date(df$date, "%Y-%m-%d")
numSteps = df %>% distinct(steps)
sort(numSteps$steps)
# Calculating total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
meanStepsPerDay <- mean(stepsPerDay)
medianStepsPerDay <- median(stepsPerDay)
meanStepsPerDay
medianStepsPerDay
# Calculating Average Daily Activity Pattern
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
meanStepsPerInterval[which.max(meanStepsPerInterval)]
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12}
else{
floor(tempStepTime)
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to 1:55 PM
# Imputing missing values
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
meanNewStepsPerDay <- mean(newStepsPerDay)
medianNewStepsPerDay <- median(newStepsPerDay)
meanNewStepsPerDay
medianNewStepsPerDay
# Determining patters on weekdays vs. weekends
df3 <- df2
df3$day_of_week <- weekdays(df3$date)
weekends <- c('Saturday', 'Sunday')
df3$day_class <- factor(df3$day_of_week %in% weekends, levels = c(TRUE, FALSE), labels = c('Weekend', 'Weekday'))
xyplot(steps~interval | day_class, data = df3, type = "l", layout = c(1,2),
xlab = "Time Interval", ylab = "Number of Steps",
main = "Number of Steps by Day Classification")
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
library(lattice)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
df <- read.csv("activity.csv")
# Explore data
str(numDates)
# Calculating total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
meanStepsPerDay <- mean(stepsPerDay)
medianStepsPerDay <- median(stepsPerDay)
meanStepsPerDay
medianStepsPerDay
# Calculating Average Daily Activity Pattern
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
meanStepsPerInterval[which.max(meanStepsPerInterval)]
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12}
else{
floor(tempStepTime)
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to 1:55 PM
# Imputing missing values
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
meanNewStepsPerDay <- mean(newStepsPerDay)
medianNewStepsPerDay <- median(newStepsPerDay)
meanNewStepsPerDay
medianNewStepsPerDay
# Determining patters on weekdays vs. weekends
df3 <- df2
df3$day_of_week <- weekdays(df3$date)
weekends <- c('Saturday', 'Sunday')
df3$day_class <- factor(df3$day_of_week %in% weekends, levels = c(TRUE, FALSE), labels = c('Weekend', 'Weekday'))
xyplot(steps~interval | day_class, data = df3, type = "l", layout = c(1,2),
xlab = "Time Interval", ylab = "Number of Steps",
main = "Number of Steps by Day Classification")
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
library(lattice)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
df <- read.csv("activity.csv")
# Explore data
#numDates = df %>% distinct(date)
#numDates$date
str(numDates)
df$date <- as.Date(df$date, "%Y-%m-%d")
#numSteps = df %>% distinct(steps)
#sort(numSteps$steps)
# Calculating total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
meanStepsPerDay <- mean(stepsPerDay)
medianStepsPerDay <- median(stepsPerDay)
meanStepsPerDay
medianStepsPerDay
# Calculating Average Daily Activity Pattern
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
meanStepsPerInterval[which.max(meanStepsPerInterval)]
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12}
else{
floor(tempStepTime)
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to 1:55 PM
# Imputing missing values
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
meanNewStepsPerDay <- mean(newStepsPerDay)
medianNewStepsPerDay <- median(newStepsPerDay)
meanNewStepsPerDay
medianNewStepsPerDay
# Determining patters on weekdays vs. weekends
df3 <- df2
df3$day_of_week <- weekdays(df3$date)
weekends <- c('Saturday', 'Sunday')
df3$day_class <- factor(df3$day_of_week %in% weekends, levels = c(TRUE, FALSE), labels = c('Weekend', 'Weekday'))
xyplot(steps~interval | day_class, data = df3, type = "l", layout = c(1,2),
xlab = "Time Interval", ylab = "Number of Steps",
main = "Number of Steps by Day Classification")
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
library(lattice)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
df <- read.csv("activity.csv")
# Explore data
#numDates = df %>% distinct(date)
#numDates$date
str(df)
df$date <- as.Date(df$date, "%Y-%m-%d")
#numSteps = df %>% distinct(steps)
#sort(numSteps$steps)
# Calculating total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
meanStepsPerDay <- mean(stepsPerDay)
medianStepsPerDay <- median(stepsPerDay)
meanStepsPerDay
medianStepsPerDay
# Calculating Average Daily Activity Pattern
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
meanStepsPerInterval[which.max(meanStepsPerInterval)]
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12}
else{
floor(tempStepTime)
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to 1:55 PM
# Imputing missing values
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
meanNewStepsPerDay <- mean(newStepsPerDay)
medianNewStepsPerDay <- median(newStepsPerDay)
meanNewStepsPerDay
medianNewStepsPerDay
# Determining patters on weekdays vs. weekends
df3 <- df2
df3$day_of_week <- weekdays(df3$date)
weekends <- c('Saturday', 'Sunday')
df3$day_class <- factor(df3$day_of_week %in% weekends, levels = c(TRUE, FALSE), labels = c('Weekend', 'Weekday'))
xyplot(steps~interval | day_class, data = df3, type = "l", layout = c(1,2),
xlab = "Time Interval", ylab = "Number of Steps",
main = "Number of Steps by Day Classification")
maxSteps <- meanStepsPerInterval[which.max(meanStepsPerInterval)]
maxSteps
maxSteps[1]
maxSteps[[1]]
maxSteps <- meanStepsPerInterval[[which.max(meanStepsPerInterval)]]
maxSteps
maxInterval <- names(meanStepsPerInterval[which.max(meanStepsPerInterval)])
maxInterval
maxInterval <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))
maxInterval
maxInterval <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/5
maxInterval
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
library(lattice)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
df <- read.csv("activity.csv")
# Explore data
#numDates = df %>% distinct(date)
#numDates$date
str(df)
df$date <- as.Date(df$date, "%Y-%m-%d")
#numSteps = df %>% distinct(steps)
#sort(numSteps$steps)
# Calculating total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
meanStepsPerDay <- mean(stepsPerDay)
medianStepsPerDay <- median(stepsPerDay)
meanStepsPerDay
medianStepsPerDay
# Calculating Average Daily Activity Pattern
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
maxSteps <- meanStepsPerInterval[[which.max(meanStepsPerInterval)]]
maxInterval <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/5
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12
amPM <- "PM"}
else{
floor(tempStepTime)
amPM <- "AM"
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to 1:55 PM
# Imputing missing values
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
meanNewStepsPerDay <- mean(newStepsPerDay)
medianNewStepsPerDay <- median(newStepsPerDay)
meanNewStepsPerDay
medianNewStepsPerDay
# Determining patters on weekdays vs. weekends
df3 <- df2
df3$day_of_week <- weekdays(df3$date)
weekends <- c('Saturday', 'Sunday')
df3$day_class <- factor(df3$day_of_week %in% weekends, levels = c(TRUE, FALSE), labels = c('Weekend', 'Weekday'))
xyplot(steps~interval | day_class, data = df3, type = "l", layout = c(1,2),
xlab = "Time Interval", ylab = "Number of Steps",
main = "Number of Steps by Day Classification")
amPM
naValues <- is.na(df$steps)
naValues
naValuesTot <- length(naValues[naValues == TRUE])
naValuesTot
###### Clearing workspace ######
rm(list=ls())
cat("\014")
################################
library(dplyr)
library(lattice)
# Reading in files
setwd("/Users/i64425/GitHub/coursera_5_reproducible_research/Project1")
df <- read.csv("activity.csv")
# Explore data
#numDates = df %>% distinct(date)
#numDates$date
str(df)
df$date <- as.Date(df$date, "%Y-%m-%d")
#numSteps = df %>% distinct(steps)
#sort(numSteps$steps)
# Calculating total number of steps per day
stepsPerDay <- tapply(df$steps, df$date, FUN = sum, na.rm = TRUE)
hist(stepsPerDay, xlab = "Steps", main = "Number of Steps Per Day")
meanStepsPerDay <- mean(stepsPerDay)
medianStepsPerDay <- median(stepsPerDay)
meanStepsPerDay
medianStepsPerDay
# Calculating Average Daily Activity Pattern
meanStepsPerInterval <- tapply(df$steps, df$interval, FUN = mean, na.rm = TRUE)
plot(names(meanStepsPerInterval), meanStepsPerInterval, type = "l", ylab = "Mean Number of Steps",
xlab = "5 Minute Intervals", main = "Mean Number of Steps At 5 Minute Intervals")
maxSteps <- meanStepsPerInterval[[which.max(meanStepsPerInterval)]]
maxInterval <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/5
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
stepTime <- paste(if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12
amPM <- "PM"}
else{
floor(tempStepTime)
amPM <- "AM"
}, (tempStepTime - floor(tempStepTime))*60, sep = ":")
# It appears that, on average, the 835th 5 minute interval (which translates to 1:55 PM) contains
# the maximum number of 206.1698 steps which translates to 1:55 PM
# Imputing missing values
naValues <- is.na(df$steps)
naValuesTot <- length(naValues[naValues == TRUE])
df2 <- df
for (i in 1:nrow(df2)){
if (is.na(df2$steps[i])){
x <- sample(0:mean(df2$steps, na.rm = TRUE))[1]
df2$steps[i] = x
}
}
newStepsPerDay <- tapply(df2$steps, df2$date, FUN = "sum")
hist(newStepsPerDay, xlab = "Steps Per Day", main = "Number of Steps Per Day")
meanNewStepsPerDay <- mean(newStepsPerDay)
medianNewStepsPerDay <- median(newStepsPerDay)
meanNewStepsPerDay
medianNewStepsPerDay
# Determining patters on weekdays vs. weekends
df3 <- df2
df3$day_of_week <- weekdays(df3$date)
weekends <- c('Saturday', 'Sunday')
df3$day_class <- factor(df3$day_of_week %in% weekends, levels = c(TRUE, FALSE), labels = c('Weekend', 'Weekday'))
xyplot(steps~interval | day_class, data = df3, type = "l", layout = c(1,2),
xlab = "Time Interval", ylab = "Number of Steps",
main = "Number of Steps by Day Classification")
tempStepTime1 <- if(floor(tempStepTime) > 12){
floor(tempStepTime) - 12} else{
floor(tempStepTime)
}
amPM <- if(floor(tempStepTime) > 12){
amPM <- "PM"} else{
floor(tempStepTime)
amPM <- "AM"
}
tempStepTime1
tempStepTime
tempStepTime <- as.integer(names(meanStepsPerInterval[which.max(meanStepsPerInterval)]))/60
tempStepTime
if(floor(tempStepTime) > 12){
stepTime <- paste(tempStepTime, (tempStepTime - floor(tempStepTime)*60 - 12), sep = ":")
amPM <- "PM"} else{
stepTime <- paste(tempStepTime, (tempStepTime - floor(tempStepTime)*60), sep = ":")
amPM <- "AM"}
stepTime
if(floor(tempStepTime) > 12){
stepTime <- paste(floor(tempStepTime)-12, (tempStepTime - floor(tempStepTime)*60), sep = ":")
amPM <- "PM"} else{
stepTime <- paste(tempStepTime, (tempStepTime - floor(tempStepTime)*60), sep = ":")
amPM <- "AM"}
stepTime
tempStepTime - floor(tempStepTime)
if(floor(tempStepTime) > 12){
stepTime <- paste(floor(tempStepTime)-12, ((tempStepTime - floor(tempStepTime))*60), sep = ":")
amPM <- "PM"} else{
stepTime <- paste(floor(tempStepTime), ((tempStepTime - floor(tempStepTime))*60), sep = ":")
amPM <- "AM"}
stepTime
